openapi: 3.0.3
info:
  title: BIOSQuery V1
  description: |-
    This is the BIOSQuery Swagger specification based on the OpenAPI 3.0 specification.
    
  termsOfService: https://github.com/team408/BIOSQuery-Backend?tab=readme-ov-file#biosquery-backend
  contact:
    email: darfeinstein@gmail.com # Change to Team408 email
#  license:
#    name: Apache 2.0
#    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: biosquery.ooguy.com/api
tags:
  - name: user
    description: User actions
#    externalDocs:
#      description: Find out more
#      url: http://swagger.io
  - name: agent
    description: Agent control actions
  - name: chipsec
    description: Chipsec conrtol actions
  - name: scan
    description: Chipsec vulnerabilites and threat hunting scans
  - name: data
    description: Get various 
paths:
  /user/create:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /agent/addNode/:osType/:hostId:
    post:
      tags:
        - agent
      summary: Add node 
      description: Enrolling a single new host to be managed by fleet and therefore by system. Either password or privateKey is required for this operation. To use default privateKey submit privateKey='default'.
      operationId: addNode
      parameters:
        - name: osType
          in: path
          description: OS of node to be enrolled. could be one of ('deb', 'rpm', 'pkg', 'msi')
          required: true
          schema:
            type: string
        - name: hostId
          in: path
          description: The IP address or Hostname of the endpoint to install OSQuery on
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
                privateKey:
                  type: string
                  format: privateKey
      responses:
        default:
          description: Task send succesfuly
  /agent/rmNode/{nodeId}:
    post:
      tags:
      - agent
      summary: Remove node
      description: This can only be done by the logged in user.
      operationId: rmNode
      parameters:
        - name: nodeId
          in: path
          description: The IP address or Hostname of the endpoint to remove OSQuery from
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
          application/xml:
            schema:
              $ref: '#/components/schemas/Node'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Node'
      responses:
        default:
          description: successful operation
  /chipsec/deploy/{nodeId}:
    post:
      tags:
      - chipsec
      summary: Install chipsec by node ID
      parameters:
        - name: nodeId
          in: path
          description: The IP address or Hostname of the endpoint to install OSQuery on
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /chipsec/uninstall/{nodeId}:
    post:
      tags:
      - chipsec
      summary: Uninstall chipsec by node ID
      parameters:
        - name: nodeId
          in: path
          description: The IP address or Hostname of the endpoint to install OSQuery on
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
          application/xml:
            schema:
              $ref: '#/components/schemas/Node'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Node'
      responses:
        default:
          description: successful operation
  /chipsec/run/{nodeId}: # send ModuleID in path?
    post:
      tags:
      - chipsec
      summary: run chipsec scripts by node ID and Module ID
      parameters:
        - name: nodeId
          in: path
          description: The IP address or Hostname of the endpoint to install OSQuery on
          required: true
          schema:
            type: string
        - name: ModuleId
          in: query
          description: The number or name of the script to run
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
          application/xml:
            schema:
              $ref: '#/components/schemas/Node'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Node'
      responses:
        default:
          description: successful operation
  /scan/fullRange/{nodeId}:
    post:
      tags:
      - scan
      summary: Run all vulnerabilities and hunt scan on given node range.
      parameters:
        - name: nodeId
          in: path
          description: The IP address or Hostname of the endpoint to install OSQuery on
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
          application/xml:
            schema:
              $ref: '#/components/schemas/Node'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Node'
      responses:
        default:
          description: successful operation
  /scan/vuln/fullRange:
    post:
      tags:
      - scan
      summary: run all vuln scan on given node range.
      responses:
        default:
          description: successful operation
  /scan/vuln/singleRange/{scanId}:
    post:
      tags:
      - scan
      summary: run a single vuln scan by scan name on given node range.
      parameters:
        - name: scanId
          in: path
          description: The code or name of the scan to run
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /scan/hunt/fullRange:
    post:
      tags:
      - scan
      summary: run all hunt scans on given node range.
      responses:
        default:
          description: successful operation
  /scan/hunt/singleRange/{scanId}:
    post:
      tags:
      - scan
      summary: run a single hunt scan by hunt name on given node range.
      parameters:
        - name: scanId
          in: path
          description: The code or name of the scan to run
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /data/nodes:
    get:
      tags: 
      - data
      summary: Get all nodes data.
      responses:
        default:
          description: successful operation
  /data/nodes/{nodeId}:
    get:
      tags: 
      - data
      summary: Get nodes data by filter (OS, OU, IP Range, Hostname convention…)
      parameters:
        - name: nodeId
          in: path
          description: The IP address or Hostname of the endpoint to install OSQuery on
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /data/NodesVulnStatusRange/{nodeId}:
    get:
      tags:
      - data
      summary: Get vulnerable nodes and details on given node range.
      parameters:
        - name: nodeId
          in: path
          description: The IP address or Hostname of the endpoint to install OSQuery on
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /data/NodesThreatStatusRange/{nodeId}:
    get:
      tags:
      - data
      summary: Get possible threats on given node range.
      parameters:
        - name: nodeId
          in: path
          description: The IP address or Hostname of the endpoint to install OSQuery on
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '0541234567'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Node:
      type: object
      properties:
        hostId:
          type: string
      xml:
        name: node
    Scan:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header